// Top Level Description

// create_job is intentionally not treated as an sql_statement to keep the parser clean 
// because we assume that inside the job, the user can specify multiple sql_statements
// but not a create_job within a create_job.

start: (sql_statement? ";")+ | (create_job ";")

sql_statement: ddl_statement | dml_statement | utility_statement | context_statement

ddl_statement: create_database | create_table | create_index | create_function |  drop_database
    | drop_table | drop_function | drop_index | drop_job | rename_table
    
dml_statement: select_statement | insert_statement | update_statement
    | delete_statement | load_statement | set_statement
    
utility_statement: describe_statement | show_statement | help_statement | explain_statement | start_scheduler_statement | stop_scheduler_statement

context_statement: use_statement

job_sql_statements: query_string (";" query_string)* ";"?


// Data Definition Language

//    Create statements

create_database: CREATE DATABASE if_not_exists? uid create_database_engine_clause

colon_param: string_literal ":" string_literal

colon_param_dict: LR_CURLY_BRACKET colon_param ("," colon_param)* RR_CURLY_BRACKET

create_database_engine_clause: WITH ENGINE "=" string_literal "," PARAMETERS "=" colon_param_dict 

create_index: CREATE INDEX if_not_exists? uid ON table_name index_elem vector_store_type?

create_table: CREATE TABLE if_not_exists? table_name (create_definitions | (AS select_statement))

create_job: CREATE JOB if_not_exists? uid AS "{" job_sql_statements "}" (start_time)? (end_time)? (repeat_clause)?

start_time: START string_literal

end_time: END string_literal

repeat_clause: EVERY decimal_literal simple_id




// Rename statements

rename_table: RENAME TABLE table_name TO table_name
    
// Create Functions 
create_function: CREATE or_replace? FUNCTION if_not_exists? function_name INPUT create_definitions OUTPUT create_definitions TYPE function_type IMPL function_impl function_metadata*
	| CREATE or_replace? FUNCTION if_not_exists? function_name IMPL function_impl function_metadata* 
	| CREATE or_replace? FUNCTION if_not_exists? function_name TYPE function_type function_metadata*
	| CREATE or_replace? FUNCTION if_not_exists? function_name FROM LR_BRACKET select_statement RR_BRACKET TYPE function_type function_metadata*

// Details
function_name: uid

function_type: uid

function_impl: string_literal

function_metadata: function_metadata_key function_metadata_value

function_metadata_key: uid

function_metadata_value: constant

vector_store_type: USING (FAISS | QDRANT | PINECONE | PGVECTOR | CHROMADB | WEAVIATE | MILVUS)

index_elem: ("(" uid_list ")"
          | "(" function_call ")")

create_definitions: "(" create_definition ("," create_definition)* ")"

create_definition: uid column_definition          -> column_declaration

column_definition: data_type column_constraint*
    
column_constraint: null_notnull            ->null_column_constraint
                 | DEFAULT default_value   ->default_column_constraint   
                 | PRIMARY? KEY   ->primary_key_column_constraint
                 | UNIQUE KEY?    ->unique_key_column_constraint    

//    Drop statements

drop_database: DROP DATABASE if_exists? uid
    
drop_index: DROP INDEX if_exists? uid
    
drop_table: DROP TABLE if_exists? uid
    
drop_function: DROP FUNCTION if_exists? uid

drop_job: DROP JOB if_exists? uid
    
// SET statements (configuration)
set_statement: SET config_name (EQUAL_SYMBOL | TO) config_value

config_name: uid

config_value: constant

// Data Manipulation Language

//    Primary DML Statements

delete_statement: DELETE FROM table_name (WHERE where_expr)?
    
insert_statement: INSERT INTO? table_name (("(" uid_list ")")? insert_statement_value)
    
select_statement: query_specification                          ->simple_select
               | select_statement UNION ALL? select_statement  ->union_select
    
update_statement: UPDATE table_name (AS? uid)? SET updated_element ("," updated_element)* (WHERE expression)? order_by_clause? limit_clause?
    
load_statement: LOAD file_format file_name INTO table_name (("(" uid_list ")"))?
    
file_format: CSV | VIDEO | IMAGE | DOCUMENT | PDF

file_options: FORMAT file_format
    
file_name: string_literal
        
// details

insert_statement_value: select_statement
    | (VALUES | VALUE) "(" expressions_with_defaults ")" ("," "(" expressions_with_defaults ")")*
    

updated_element: full_column_name "=" (expression | DEFAULT)
 
order_by_clause: ORDER BY order_by_expression ("," order_by_expression)*

order_by_expression: expression sort_order?

sort_order: ASC | DESC

// Forcing EXPLICIT JOIN KEYWORD
table_sources: table_source
    
table_source: table_source_item_with_param join_part* 

table_source_item_with_param: table_source_item alias_clause? (sample_params | chunk_params)?

sample_params:  sample_clause | sample_clause_with_type

chunk_params: CHUNK_SIZE decimal_literal | CHUNK_SIZE decimal_literal CHUNK_OVERLAP decimal_literal | CHUNK_OVERLAP decimal_literal

table_source_item: table_name | subquery_table_source_item   
    

table_valued_function: function_call                                
    | UNNEST LR_BRACKET function_call RR_BRACKET   
    
subquery_table_source_item: (select_statement | LR_BRACKET select_statement RR_BRACKET)
    
sample_clause: SAMPLE decimal_literal

sample_clause_with_type: SAMPLE sample_type decimal_literal*

sample_type: IFRAMES | AUDIORATE


join_part: JOIN table_source_item_with_param (ON expression | USING LR_BRACKET uid_list RR_BRACKET)?  ->inner_join
         | JOIN LATERAL table_valued_function alias_clause? ->lateral_join
    
alias_clause: AS? uid "(" uid_list ")" | AS? uid
    
// Select Statement Details

query_expression: "(" query_specification ")" | "(" query_expression ")"
    
query_specification: SELECT select_elements from_clause? order_by_clause? limit_clause?
    
select_elements: (STAR | select_element ) ("," select_element)*
    
select_element: full_id "." STAR       ->select_star_element      
              | (LOCAL_ID VAR_ASSIGN)? expression (AS? uid)?  ->select_expression_element                 
    
from_clause: FROM table_sources (WHERE where_expr)? (GROUP BY  group_by_item ("," group_by_item)* )? (HAVING expression)?

where_expr: expression

group_by_item: expression sort_order?
    
limit_clause: LIMIT ((decimal_literal ",")? decimal_literal  | decimal_literal OFFSET decimal_literal)
    	
// Utility Statements

describe_statement: DESCRIBE table_name
    
help_statement: HELP STRING_LITERAL
    
show_statement: SHOW (FUNCTIONS | TABLES | uid | DATABASES)

explain_statement: EXPLAIN explainable_statement

explainable_statement : select_statement | insert_statement | update_statement | delete_statement | create_table

start_scheduler_statement : START JOB_SCHEDULER

stop_scheduler_statement : STOP JOB_SCHEDULER

// Context Statements

use_statement: USE database_name "{" query_string "}" // One shortcoming that query string cannot have parenthesis

// Common Clauses

//    DB Objects

query_string: QUERY_STRING

full_id: uid dotted_id?

database_name: full_id
    
table_name: full_id
        
full_column_name: uid (dotted_id dotted_id? )?
    
index_column_name: uid ("(" decimal_literal ")")? sort_order?
    
user_name: STRING_USER_NAME | ID

uuid_set: decimal_literal "-" decimal_literal "-" decimal_literal "-" decimal_literal "-" decimal_literal (":" decimal_literal "-" decimal_literal)+
    
uid: simple_id | REVERSE_QUOTE_ID
    
simple_id: ID
    
dotted_id: DOT_ID | "." uid

//    Literals
    
string_literal: STRING_LITERAL

boolean_literal: TRUE | FALSE

null_notnull: NOT? NULL_LITERAL

array_literal: LR_SQ_BRACKET  constant ("," constant)* RR_SQ_BRACKET
             | LR_SQ_BRACKET RR_SQ_BRACKET

constant: string_literal | decimal_literal | boolean_literal | real_literal | array_literal

real_literal: REAL_LITERAL

decimal_literal: DECIMAL_LITERAL | ZERO_DECIMAL | ONE_DECIMAL | TWO_DECIMAL | ANYDIM

//    Data Types

array_type: INT8 | UINT8 | INT16 | INT32 | INT64
    | UNICODE | BOOLEAN
    | FLOAT32 | FLOAT64 | DECIMAL
    | STR | DATETIME | ANYTYPE
    

data_type: BOOLEAN      ->simple_data_type                                  
    | TEXT length_one_dimension?   ->dimension_data_type                     
    | INTEGER UNSIGNED?      ->integer_data_type                        
    | FLOAT length_two_dimension? UNSIGNED?      ->dimension_data_type         
    | NDARRAY array_type? length_dimension_list?    ->array_data_type     
    | ANYTYPE        ->any_data_type                                 
    

length_one_dimension: "(" decimal_literal ")"
    
length_two_dimension: "(" decimal_literal "," decimal_literal ")"
    
length_dimension_list: "(" ( decimal_literal  ",")* decimal_literal ")"
    
//    Common Lists

uid_list: uid ("," uid)*
            
expressions: expression ("," expression)*
    
expressions_with_defaults: expression_or_default ("," expression_or_default)*
    

//    Common Expressions

default_value: NULL_LITERAL | constant
    
expression_or_default: expression | DEFAULT
    
if_exists: IF EXISTS

if_not_exists: IF NOT EXISTS

or_replace: OR REPLACE

//    Functions

function_call: function         ->function_call           
    | aggregate_windowed_function   ->aggregate_function_call

function: simple_id "(" (STAR | function_args)? ")" dotted_id?
    
aggregate_windowed_function: aggregate_function_name "(" function_arg ")"
                           | COUNT "(" (STAR | function_arg) ")"
    

aggregate_function_name: AVG | MAX | MIN | SUM | FIRST | LAST | SEGMENT

function_args: (function_arg) ("," function_arg)*
    
function_arg: constant | expression

//    Expressions, predicates

// Simplified approach for expression
expression: (NOT | "!") expression ->not_expression  | expression logical_operator expression ->logical_expression | predicate IS NOT? (TRUE | FALSE | UNKNOWN) ->is_expression | predicate   ->predicate_expression
    

predicate: predicate NOT? IN "(" (select_statement | expressions) ")"  ->in_predicate
    | predicate IS null_notnull   ->is_null_predicate
    | predicate comparison_operator predicate  -> binary_comparison_predicate 
    | predicate comparison_operator (ALL | ANY | SOME) "(" select_statement ")"   ->subquery_comparison_predicate
    | assign_var   ->expression_atom_predicate   
    | expression_atom 

assign_var.1: LOCAL_ID VAR_ASSIGN expression_atom  

// Add in ASTVisitor null_notnull in constant
expression_atom.2: constant       ->constant_expression_atom                                              
    | full_column_name           ->full_column_name_expression_atom                                     
    | function_call    ->function_call_expression_atom                                             
    | unary_operator expression_atom   ->unary_expression_atom                               
    | "(" expression ("," expression)* ")"    ->nested_expression_atom                     
    | "(" select_statement ")" ->subquery_expession_atom                                       
    | expression_atom bit_operator expression_atom   ->bit_expression_atom       
    | expression_atom math_operator expression_atom 

unary_operator: EXCLAMATION_SYMBOL | BIT_NOT_OP | PLUS | MINUS | NOT 
    
comparison_operator: EQUAL_SYMBOL | GREATER_SYMBOL | LESS_SYMBOL | GREATER_OR_EQUAL_SYMBOL | LESS_OR_EQUAL_SYMBOL | NOT_EQUAL_SYMBOL | CONTAINS_SYMBOL | CONTAINED_IN_SYMBOL | LIKE_SYMBOL
    
logical_operator: AND | XOR | OR 
    
bit_operator: "<<" | ">>" | "&" | "^" | "|"

math_operator: STAR | DIVIDE | MODULUS | DIV | MOD | PLUS | MINUS | MINUSMINUS

// KEYWORDS

ALL:                                 "ALL"i
ALTER:                               "ALTER"i
AND:                                 "AND"i
ANY:                                 "ANY"i
ANYDIM:                              "ANYDIM"i
AS:                                  "AS"i
ASC:                                 "ASC"i
BLOB:                                "BLOB"i
BY:                                  "BY"i
CHUNK_SIZE:                          "CHUNK_SIZE"i
CHUNK_OVERLAP:                       "CHUNK_OVERLAP"i
COLUMN:                              "COLUMN"i
CREATE:                              "CREATE"i
DATABASE:                            "DATABASE"i
DATABASES:                           "DATABASES"i
DEFAULT:                             "DEFAULT"i
DELETE:                              "DELETE"i
DESC:                                "DESC"i
DESCRIBE:                            "DESCRIBE"i
DISTINCT:                            "DISTINCT"i
DROP:                                "DROP"i
END:                                 "END"i
ENGINE:                              "ENGINE"i
EVERY:                               "EVERY"i
EXIT:                                "EXIT"i
EXISTS:                              "EXISTS"i
EXPLAIN:                             "EXPLAIN"i
FALSE:                               "FALSE"i
FROM:                                "FROM"i
GROUP:                               "GROUP"i
HAVING:                              "HAVING"i
IF:                                  "IF"i
IN:                                  "IN"i
FILE:                                "FILE"i
INDIR:                               "INDIR"i
INTO:                                "INTO"i
INDEX:                               "INDEX"i
INSERT:                              "INSERT"i
IS:                                  "IS"i
JOB:                                 "JOB"i
JOB_SCHEDULER:                       "JOB_SCHEDULER"i
JOIN:                                "JOIN"i
KEY:                                 "KEY"i
LATERAL:                             "LATERAL"i
LIKE:                                "LIKE"i
LIMIT:                               "LIMIT"i
LOAD:                                "LOAD"i
NO:                                  "NO"i
NOT:                                 "NOT"i
NULL_LITERAL:                        "NULL"i
OFFSET:                              "OFFSET"i
ON:                                  "ON"i
OR:                                  "OR"i
ORDER:                               "ORDER"i
PATH:                                "PATH"i
PARAMETERS:                          "PARAMETERS"i
PRIMARY:                             "PRIMARY"i
REFERENCES:                          "REFERENCES"i
RENAME:                              "RENAME"i
REPLACE:                             "REPLACE"i
USE:                                 "USE"i
SAMPLE:                              "SAMPLE"i
IFRAMES:                             "IFRAMES"i
AUDIORATE:                           "AUDIORATE"i
SELECT:                              "SELECT"i
SET:                                 "SET"i
SHUTDOWN:                            "SHUTDOWN"i
SHOW:                                "SHOW"i
SOME:                                "SOME"i
START:                               "START"i
STOP:                                "STOP"i
TABLE:                               "TABLE"i
TABLES:                              "TABLES"i
TO:                                  "TO"i
TRUE:                                "TRUE"i
FUNCTIONS:                           "FUNCTIONS"i
UNION:                               "UNION"i
UNIQUE:                              "UNIQUE"i
UNKNOWN:                             "UNKNOWN"i
UNLOCK:                              "UNLOCK"i
UNNEST:                              "UNNEST"i
UNSIGNED:                            "UNSIGNED"i
UPDATE:                              "UPDATE"i
USING:                               "USING"i
VALUES:                              "VALUES"i
WHERE:                               "WHERE"i
XOR:                                 "XOR"i

// File Formats
WITH:                 "WITH"i
FORMAT:               "FORMAT"i
CSV:                  "CSV"i
VIDEO:                "VIDEO"i
IMAGE:                "IMAGE"i
DOCUMENT:             "DOCUMENT"i
PDF:                  "PDF"i

// Index types
FAISS:                               "FAISS"i
QDRANT:                              "QDRANT"i
PINECONE:                            "PINECONE"i
PGVECTOR:                            "PGVECTOR"i
CHROMADB:                            "CHROMADB"i
WEAVIATE:                            "WEAVIATE"i
MILVUS:                              "MILVUS"i

// Computer vision tasks

OBJECT_DETECTION:                    "OBJECT_DETECTION"i
ACTION_CLASSICATION:                 "ACTION_CLASSICATION"i

// DATA TYPE Keywords

BOOLEAN:                             "BOOLEAN"i
INTEGER:                             "INTEGER"i
FLOAT:                               "FLOAT"i
TEXT:                                "TEXT"i
NDARRAY:                             "NDARRAY"i
INT8:                                "INT8"i
UINT8:                               "UINT8"i
INT16:                               "INT16"i
INT32:                               "INT32"i
INT64:                               "INT64"i
UNICODE:                             "UNICODE"i
FLOAT32:                             "FLOAT32"i
FLOAT64:                             "FLOAT64"i
DECIMAL:                             "DECIMAL"i
STR:                                 "STR"i
DATETIME:                            "DATETIME"i
ANYTYPE:                             "ANYTYPE"i

// Group function Keywords

AVG:                                 "AVG"i
COUNT:                               "COUNT"i
MAX:                                 "MAX"i
MIN:                                 "MIN"i
STD:                                 "STD"i
SUM:                                 "SUM"i
FCOUNT: 						     "FCOUNT"i
FIRST:                               "FIRST"i
LAST:                                "LAST"i
SEGMENT:                             "SEGMENT"i

// Keywords, but can be ID
// Common Keywords, but can be ID

AUTO_INCREMENT:                      "AUTO_INCREMENT"i
HELP:                                "HELP"i
TEMPTABLE:                           "TEMPTABLE"i
VALUE:                               "VALUE"i

// Function
FUNCTION:						     "FUNCTION"i
INPUT:                               "INPUT"i
OUTPUT:                              "OUTPUT"i
TYPE:                                "TYPE"i
IMPL:                                "IMPL"i

// Common function names

ABS:                                 "ABS"i

// Operators
// Operators. Assignment

VAR_ASSIGN:                          ":="
PLUS_ASSIGN:                         "+="
MINUS_ASSIGN:                        "-="
MULT_ASSIGN:                         "*="
DIV_ASSIGN:                          "/="
MOD_ASSIGN:                          "%="
AND_ASSIGN:                          "&="
XOR_ASSIGN:                          "^="
OR_ASSIGN:                           "|="


// Operators. Arithmetic

STAR:                                "*"
DIVIDE:                              "/"
MODULUS:                              "%"
PLUS:                                "+"
MINUSMINUS:                          "--"
MINUS:                               "-"
DIV:                                 "DIV"
MOD:                                 "MOD"


// Operators. Comparison

EQUAL_SYMBOL:                        "="
GREATER_SYMBOL:                      ">"
LESS_SYMBOL:                         "<"
EXCLAMATION_SYMBOL:                  "!"
GREATER_OR_EQUAL_SYMBOL:             "<="
LESS_OR_EQUAL_SYMBOL:                ">="
NOT_EQUAL_SYMBOL:                    "!="
CONTAINS_SYMBOL:                     "@>"
CONTAINED_IN_SYMBOL:                 "<@"
LIKE_SYMBOL:                         "LIKE"

// Operators. Bit

BIT_NOT_OP:                          "~"
BIT_OR_OP:                           "|"
BIT_AND_OP:                          "&"
BIT_XOR_OP:                          "^"

// Constructors symbols

DOT:                                 "."
LR_BRACKET:                          "("
RR_BRACKET:                          ")"
LR_SQ_BRACKET:                       "["
RR_SQ_BRACKET:                       "]"
LR_CURLY_BRACKET:                    "{"
RR_CURLY_BRACKET:                    "}"
COMMA:                               ","
SEMI:                                ";"
AT_SIGN:                             "@"
ZERO_DECIMAL:                        "0"
ONE_DECIMAL:                         "1"
TWO_DECIMAL:                         "2"
SINGLE_QUOTE_SYMB:                   "\""
DOUBLE_QUOTE_SYMB:                   "\"\""
REVERSE_QUOTE_SYMB:                  "`"
COLON_SYMB:                          ":"

// Literal Primitives

STRING_LITERAL:                      DQUOTA_STRING | SQUOTA_STRING
DECIMAL_LITERAL:                     DEC_DIGIT+
REAL_LITERAL:                        (DEC_DIGIT+)? "." DEC_DIGIT+
                                     | DEC_DIGIT+ "." EXPONENT_NUM_PART
                                     | (DEC_DIGIT+)? "." (DEC_DIGIT+ EXPONENT_NUM_PART)
                                     | DEC_DIGIT+ EXPONENT_NUM_PART
                                     | (DEC_DIGIT+) "." (DEC_DIGIT+) "e" "-"? DEC_DIGIT+


// Hack for dotID
// Prevent recognize string:         .123somelatin AS ((.123), FLOAT_LITERAL), ((somelatin), ID)
//  it must recoginze:               .123somelatin AS ((.), DOT), (123somelatin, ID)

DOT_ID:                              "." ID_LITERAL


// Identifiers

ID:                                  ID_LITERAL
REVERSE_QUOTE_ID:                    "`" /[^"`"]*/ "`"
STRING_USER_NAME:                    (SQUOTA_STRING | DQUOTA_STRING | BQUOTA_STRING | ID_LITERAL) "@" (SQUOTA_STRING | DQUOTA_STRING | BQUOTA_STRING | ID_LITERAL)
LOCAL_ID:                            "@" (/[A-Z0-9._$]+/ | SQUOTA_STRING | DQUOTA_STRING | BQUOTA_STRING)
GLOBAL_ID:                           "@" "@" (/[A-Z0-9._$]+/ | BQUOTA_STRING)

// Fragments for Literal primitives

EXPONENT_NUM_PART:          /"E" "-"? DEC_DIGIT+/
ID_LITERAL:                 /[A-Za-z_$0-9]*?[A-Za-z_$]+?[A-Za-z_$0-9]*/
DQUOTA_STRING:              "\"" /(?:[^"\\]|\\.)*"/
SQUOTA_STRING:              "'" /(?:[^'\\]|\\.)*'/
BQUOTA_STRING:              /`[^'`]*`/
QUERY_STRING:               /[^{};]+/
DEC_DIGIT:                  /[0-9]/

// LARK

NEWLINE: "\n"
COMMENT: MINUSMINUS /[^\n]*/ NEWLINE
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.CNAME
%import common.ESCAPED_STRING
%import common.WS

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
